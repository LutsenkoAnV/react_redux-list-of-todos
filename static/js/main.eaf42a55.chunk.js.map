{"version":3,"sources":["store.tsx","api.ts","components/User/User.tsx","components/Todo/Todo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["initialState","todos","store","createStore","state","action","type","payload","sort","a","b","user","name","localeCompare","title","Number","completed","filter","todo","id","API_URL","getData","url","fetch","response","json","User","className","connect","dispatch","removeTask","aria-label","data-name","onClick","mapDispatchToProps","sortByName","sortByTitle","sortByComplete","value","map","key","setTodos","useState","isLoading","setLoading","isStarted","setStarted","disabled","Promise","all","then","todosFromApi","usersFromApi","receivedTodos","find","person","userId","ReactDOM","render","document","getElementById"],"mappings":"sQAkBMA,EAA6B,CACjCC,MAAO,IAuDIC,EAAQC,aAnCuC,WAGtD,IAFJC,EAEG,uDAFKJ,EACRK,EACG,uCACH,OAAQA,EAAOC,MACb,IAhCkB,gBAiChB,MAAO,CACLL,MAAOI,EAAOE,SAGlB,IApCiB,eAqCf,MAAO,CACLN,MAAO,YAAIG,EAAMH,OAAOO,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,KAAKC,KAAKC,cAAcH,EAAEC,KAAKC,UAG5E,IAxCkB,gBAyChB,MAAO,CACLX,MAAO,YAAIG,EAAMH,OAAOO,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEK,MAAMD,cAAcH,EAAEI,WAGnE,IA5CqB,mBA6CnB,MAAO,CACLb,MAAO,YAAIG,EAAMH,OAAOO,MAAK,SAACC,EAAGC,GAAJ,OAAUK,OAAON,EAAEO,WAAaD,OAAOL,EAAEM,eAG1E,IAhDgB,cAiDd,MAAO,CACLf,MAAOG,EAAMH,MAAMgB,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAOd,EAAOc,OAGzD,QACE,OAAOf,M,uCCtEPgB,EAAU,wCAEHC,EAAO,uCAAG,WAAUC,GAAV,eAAAb,EAAA,sEACEc,MAAMD,GADR,cACfE,EADe,yBAGdA,EAASC,QAHK,2CAAH,sDCIPC,EAAkB,SAAC,GAAc,IAAZf,EAAW,EAAXA,KAChC,OAAOA,EAAO,wBAAIgB,UAAU,UAAUhB,EAAKC,MAAa,8BC2B3CgB,cAAQ,MAPI,SAACC,GAAD,MAAyB,CAClDC,WAAY,SAACZ,GAAD,OAAwBW,EAAS,CAC3CvB,KAAM,cACNa,GAAID,EAAKC,SAIES,EAxBS,SAAC,GAAD,IAAGV,EAAH,EAAGA,KAAMY,EAAT,EAASA,WAAT,OACtB,wBAAIH,UAAU,OACZ,kBAAC,EAAD,CAAMhB,KAAMO,EAAKP,OACjB,wBAAIgB,UAAU,UACXT,EAAKJ,MACN,4BACER,KAAK,SACLqB,UAAU,UACVI,aAAW,SACXC,YAAWd,EAAKC,GAChBc,QAAS,kBAAMH,EAAWZ,OAG9B,wBAAIS,UAAU,UAAUT,EAAKF,UAAY,OAAS,WC6ChDkB,EAAqB,CACzBC,WJ1CwB,iBAAO,CAC/B7B,KAfmB,iBIyDnB8B,YJvCyB,iBAAO,CAChC9B,KAlBoB,kBIyDpB+B,eJpC4B,iBAAO,CACnC/B,KArBuB,sBI2DVsB,eAVS,SAACxB,GAAD,MAA0B,CAChDH,MAAOG,EAAMH,SASyBiC,EAAzBN,EAzDa,SAAC,GAAD,IAC1B3B,EAD0B,EAC1BA,MACAkC,EAF0B,EAE1BA,WACAC,EAH0B,EAG1BA,YACAC,EAJ0B,EAI1BA,eAJ0B,OAM1B,2BAAOV,UAAU,SACf,+BACE,wBAAIA,UAAU,OACZ,wBAAIA,UAAU,eACZ,4BACErB,KAAK,SACLgC,MAAM,OACNX,UAAU,qBACVM,QAASE,GAJX,SASF,4BACE,4BACE7B,KAAK,SACLgC,MAAM,QACNX,UAAU,qBACVM,QAASG,GAJX,UASF,4BACE,4BACE9B,KAAK,SACLgC,MAAM,SACNX,UAAU,qBACVM,QAASI,GAJX,aAWN,+BACGpC,EAAMsC,KAAI,SAAArB,GAAI,OAAI,kBAAC,EAAD,CAAMsB,IAAKtB,EAAKC,GAAID,KAAMA,YCH7CgB,G,MAAqB,CACzBO,SLnCsB,SAAClC,GAAD,MAA8B,CACpDD,KAXoB,gBAYpBC,cKoCaqB,cAAQ,KAAMM,EAAdN,EAhDQ,SAAC,GAAkB,IAAhBa,EAAe,EAAfA,SAAe,EACPC,oBAAS,GADF,mBAChCC,EADgC,KACrBC,EADqB,OAEPF,oBAAS,GAFF,mBAEhCG,EAFgC,KAErBC,EAFqB,KAyBvC,OACE,oCACGD,EAEG,4BACEvC,KAAK,SACLqB,UAAU,qBACVoB,SAAUJ,EACVV,QA7BO,WACfW,GAAW,GAEXI,QAAQC,IAAI,CJVP5B,EAAO,UAAYD,EAAZ,UAIPC,EAAO,UAAYD,EAAZ,YIST8B,MAAK,YAGD,IAAD,mBAFJC,EAEI,KADJC,EACI,KACEC,EAAgBF,EAAaZ,KAAI,SAAArB,GAAI,sBACtCA,EADsC,CAEzCP,KAAMyC,EAAaE,MAAK,SAAAC,GAAM,OAAIrC,EAAKsC,SAAWD,EAAOpC,WAG3DsB,EAASY,GACTT,GAAW,GACXE,GAAW,QAcJH,EAAY,aAAe,QAG9B,kBAAC,EAAD,UC5CVc,IAASC,OACP,kBAAC,IAAD,CAAUxD,MAAOA,GACf,kBAAC,EAAD,OAEFyD,SAASC,eAAe,W","file":"static/js/main.eaf42a55.chunk.js","sourcesContent":["import { Action, Reducer, createStore } from 'redux';\n\ninterface DispatchAction extends Action {\n  type: string;\n  payload: TodoWithUser[];\n  id?: number;\n}\n\nexport interface InitialState {\n  todos: TodoWithUser[] | [];\n}\n\nconst LOAD_FROM_API = 'LOAD_FROM_API';\nconst SORT_BY_NAME = 'SORT_BY_NAME';\nconst SORT_BY_TITLE = 'SORT_BY_TITLE';\nconst SORT_BY_COMPLETE = 'SORT_BY_COMPLETE';\nconst DELETE_TASK = 'DELETE_TASK';\n\nconst initialState: InitialState = {\n  todos: [],\n};\n\nexport const setTodos = (payload: TodoWithUser[]) => ({\n  type: LOAD_FROM_API,\n  payload,\n});\n\nexport const sortByName = () => ({\n  type: SORT_BY_NAME,\n});\n\nexport const sortByTitle = () => ({\n  type: SORT_BY_TITLE,\n});\n\nexport const sortByComplete = () => ({\n  type: SORT_BY_COMPLETE,\n});\n\nconst todosReducer: Reducer<InitialState, DispatchAction> = (\n  state = initialState,\n  action,\n) => {\n  switch (action.type) {\n    case LOAD_FROM_API:\n      return {\n        todos: action.payload,\n      };\n\n    case SORT_BY_NAME:\n      return {\n        todos: [...state.todos].sort((a, b) => a.user.name.localeCompare(b.user.name)),\n      };\n\n    case SORT_BY_TITLE:\n      return {\n        todos: [...state.todos].sort((a, b) => a.title.localeCompare(b.title)),\n      };\n\n    case SORT_BY_COMPLETE:\n      return {\n        todos: [...state.todos].sort((a, b) => Number(a.completed) - Number(b.completed)),\n      };\n\n    case DELETE_TASK:\n      return {\n        todos: state.todos.filter(todo => todo.id !== action.id),\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore<InitialState, DispatchAction, null, null>(todosReducer);\n","const API_URL = 'https://jsonplaceholder.typicode.com/';\n\nexport const getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n\n  return response.json();\n};\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return getData<Todo[]>(`${API_URL}todos`);\n};\n\nexport const getUsers = (): Promise<User[]> => {\n  return getData<User[]>(`${API_URL}users`);\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  user: User | undefined;\n}\n\nexport const User: FC<Props> = ({ user }) => {\n  return user ? <td className=\"column\">{user.name}</td> : <td />;\n};\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { User } from '../User/User';\n\ninterface Props {\n  todo: TodoWithUser;\n  removeTask: (todo: TodoWithUser) => void;\n}\n\nconst Todo: FC<Props> = ({ todo, removeTask }) => (\n  <tr className=\"row\">\n    <User user={todo.user} />\n    <td className=\"column\">\n      {todo.title}\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        aria-label=\"Delete\"\n        data-name={todo.id}\n        onClick={() => removeTask(todo)}\n      />\n    </td>\n    <td className=\"column\">{todo.completed ? 'Done' : '---'}</td>\n  </tr>\n);\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  removeTask: (todo: TodoWithUser) => dispatch({\n    type: 'DELETE_TASK',\n    id: todo.id,\n  }),\n});\n\nexport default connect(null, mapDispatchToProps)(Todo);\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  sortByName as sortByNameStore,\n  sortByTitle as sortByTitleStore,\n  sortByComplete as sortByCompleteStore,\n  InitialState,\n} from '../../store';\nimport Todo from '../Todo/Todo';\n\ninterface Props {\n  todos: TodoWithUser[];\n  sortByName: () => void;\n  sortByTitle: () => void;\n  sortByComplete: () => void;\n}\n\nconst TodoList: FC<Props> = ({\n  todos,\n  sortByName,\n  sortByTitle,\n  sortByComplete,\n}) => (\n  <table className=\"table\">\n    <thead>\n      <tr className=\"row\">\n        <th className=\"head-column\">\n          <button\n            type=\"button\"\n            value=\"Name\"\n            className=\"button-sort button\"\n            onClick={sortByName}\n          >\n            Name\n          </button>\n        </th>\n        <th>\n          <button\n            type=\"button\"\n            value=\"Todos\"\n            className=\"button-sort button\"\n            onClick={sortByTitle}\n          >\n            Todos\n          </button>\n        </th>\n        <th>\n          <button\n            type=\"button\"\n            value=\"Status\"\n            className=\"button-sort button\"\n            onClick={sortByComplete}\n          >\n            Status\n          </button>\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      {todos.map(todo => <Todo key={todo.id} todo={todo} />)}\n    </tbody>\n  </table>\n);\n\nconst mapStateToProps = (state: InitialState) => ({\n  todos: state.todos,\n});\n\nconst mapDispatchToProps = {\n  sortByName: sortByNameStore,\n  sortByTitle: sortByTitleStore,\n  sortByComplete: sortByCompleteStore,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);\n","import React, { FC, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { setTodos as setTodosStore } from './store';\nimport { getTodos, getUsers } from './api';\nimport TodoList from './components/TodoList/TodoList';\n\nimport './App.css';\n\ninterface Props {\n  setTodos: (receivedTodos: TodoWithUser[]) => void;\n}\n\nconst App: FC<Props> = ({ setTodos }) => {\n  const [isLoading, setLoading] = useState(false);\n  const [isStarted, setStarted] = useState(true);\n\n  const loadData = () => {\n    setLoading(true);\n\n    Promise.all([\n      getTodos(),\n      getUsers(),\n    ]).then(([\n      todosFromApi,\n      usersFromApi,\n    ]) => {\n      const receivedTodos = todosFromApi.map(todo => ({\n        ...todo,\n        user: usersFromApi.find(person => todo.userId === person.id) as User,\n      }));\n\n      setTodos(receivedTodos);\n      setLoading(false);\n      setStarted(false);\n    });\n  };\n\n  return (\n    <>\n      {isStarted\n        ? (\n          <button\n            type=\"button\"\n            className=\"button button-load\"\n            disabled={isLoading}\n            onClick={loadData}\n          >\n            {isLoading ? 'Loading...' : 'Load'}\n          </button>\n        ) : (\n          <TodoList />\n        )}\n    </>\n  );\n};\n\nconst mapDispatchToProps = {\n  setTodos: setTodosStore,\n};\n\nexport default connect(null, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}