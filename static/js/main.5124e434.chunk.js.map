{"version":3,"sources":["store.tsx","api.ts","components/User/User.tsx","components/Todo/Todo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["initialState","todos","store","createStore","state","action","type","sort","a","b","user","name","localeCompare","title","Number","completed","filter","todo","id","API_URL","getData","url","fetch","response","json","User","className","connect","dispatch","removeTask","aria-label","data-name","onClick","sortByName","sortByTitle","sortByComplete","value","map","key","setTodos","receivedTodos","useState","isLoading","setLoading","isStarted","setStarted","preparedTodos","disabled","Promise","all","then","todosFromApi","usersFromApi","find","person","userId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5124e434.chunk.js","sourcesContent":["import { Action, Reducer, createStore } from 'redux';\n\nexport interface InitialState {\n  todos: TodosWithUser | [];\n}\n\ninterface DispatchAction extends Action {\n  type: string;\n  todos: TodosWithUser;\n  id?: number;\n}\n\nconst initialState: InitialState = {\n  todos: [],\n};\n\nconst todosReducer: Reducer<InitialState, DispatchAction> = (state = initialState, action) => {\n  switch (action.type) {\n    case 'LOAD_FROM_API':\n      return {\n        todos: action.todos,\n      };\n\n    case 'SORT_BY_NAME':\n      return {\n        todos: [...state.todos].sort((a, b) => a.user.name.localeCompare(b.user.name)),\n      };\n\n    case 'SORT_BY_TITLE':\n      return {\n        todos: [...state.todos].sort((a, b) => a.title.localeCompare(b.title)),\n      };\n\n    case 'SORT_BY_COMPLETE':\n      return {\n        todos: [...state.todos].sort((a, b) => Number(a.completed) - Number(b.completed)),\n      };\n\n    case 'DELETE_TASK':\n      return {\n        todos: [...state.todos].filter(todo => todo.id !== action.id),\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore<InitialState, DispatchAction, null, null>(todosReducer);\n","const API_URL = 'https://jsonplaceholder.typicode.com/';\n\nexport const getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n\n  return response.json();\n};\n\nexport const getTodos = (): Promise<Todos> => {\n  return getData<Todos>(`${API_URL}todos`);\n};\n\nexport const getUsers = (): Promise<Users> => {\n  return getData<Users>(`${API_URL}users`);\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  user: User | undefined;\n}\n\nexport const User: FC<Props> = ({ user }) => {\n  return user ? <td className=\"column\">{user.name}</td> : <td />;\n};\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { User } from '../User/User';\n\ninterface Props {\n  todo: TodoWithUser;\n  removeTask: (todo: TodoWithUser) => void;\n}\n\nconst Todo: FC<Props> = ({ todo, removeTask }) => (\n  <tr className=\"row\">\n    <User user={todo.user} />\n    <td className=\"column\">\n      {todo.title}\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        aria-label=\"Delete\"\n        data-name={todo.id}\n        onClick={() => removeTask(todo)}\n      />\n    </td>\n    <td className=\"column\">{todo.completed ? 'Done' : '---'}</td>\n  </tr>\n);\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  removeTask: (todo: TodoWithUser) => dispatch({\n    type: 'DELETE_TASK',\n    id: todo.id,\n  }),\n});\n\nexport default connect(null, mapDispatchToProps)(Todo);\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport Todo from '../Todo/Todo';\n\ninterface Props {\n  todos: TodosWithUser;\n  sortByName: () => void;\n  sortByTitle: () => void;\n  sortByComplete: () => void;\n}\n\nconst TodoList: FC<Props> = ({\n  todos,\n  sortByName,\n  sortByTitle,\n  sortByComplete,\n}) => (\n  <table className=\"table\">\n    <thead>\n      <tr className=\"row\">\n        <th className=\"head-column\">\n          <button\n            type=\"button\"\n            value=\"Name\"\n            className=\"button-sort button\"\n            onClick={sortByName}\n          >\n            Name\n          </button>\n        </th>\n        <th>\n          <button\n            type=\"button\"\n            value=\"Todos\"\n            className=\"button-sort button\"\n            onClick={sortByTitle}\n          >\n            Todos\n          </button>\n        </th>\n        <th>\n          <button\n            type=\"button\"\n            value=\"Status\"\n            className=\"button-sort button\"\n            onClick={sortByComplete}\n          >\n            Status\n          </button>\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      {todos.map(todo => <Todo key={todo.id} todo={todo} />)}\n    </tbody>\n  </table>\n);\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  sortByName: () => dispatch({\n    type: 'SORT_BY_NAME',\n  }),\n  sortByTitle: () => dispatch({\n    type: 'SORT_BY_TITLE',\n  }),\n  sortByComplete: () => dispatch({\n    type: 'SORT_BY_COMPLETE',\n  }),\n});\n\nexport default connect(null, mapDispatchToProps)(TodoList);\n","import React, { FC, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { InitialState } from './store';\nimport { getTodos, getUsers } from './api';\nimport TodoList from './components/TodoList/TodoList';\n\nimport './App.css';\n\ninterface Props {\n  todos: TodosWithUser | [];\n  setTodos: (receivedTodos: TodosWithUser) => void;\n}\n\nconst App: FC<Props> = ({ todos, setTodos }) => {\n  const [isLoading, setLoading] = useState(false);\n  const [isStarted, setStarted] = useState(true);\n  const preparedTodos = [...todos];\n\n  const loadData = () => {\n    setLoading(true);\n\n    Promise.all([getTodos(), getUsers()])\n      .then(([todosFromApi, usersFromApi]) => {\n        const receivedTodos = todosFromApi.map(todo => ({\n          ...todo,\n          user: usersFromApi.find(person => todo.userId === person.id) as User,\n        }));\n\n        setTodos(receivedTodos);\n        setLoading(false);\n        setStarted(false);\n      });\n  };\n\n  return (\n    <>\n      {isStarted\n        ? (\n          <button\n            type=\"button\"\n            className=\"button button-load\"\n            disabled={isLoading}\n            onClick={loadData}\n          >\n            {isLoading ? 'Loading...' : 'Load'}\n          </button>\n        ) : (\n          <TodoList\n            todos={preparedTodos}\n          />\n        )}\n    </>\n  );\n};\n\nconst mapStateToProps = (state: InitialState) => ({\n  todos: state.todos,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  setTodos: (receivedTodos: TodosWithUser) => dispatch({\n    type: 'LOAD_FROM_API',\n    todos: receivedTodos,\n  }),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}